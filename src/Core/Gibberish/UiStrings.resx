<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
		Microsoft ResX Schema 
		
		Version 2.0
		
		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.
		
		Example:
		
		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">2.0</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
				<value>[base64 mime encoded serialized .NET Framework object]</value>
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
				<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
				<comment>This is a comment</comment>
		</data>
								
		There are any number of "resheader" rows that contain simple 
		name/value pairs.
		
		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.
		
		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:
		
		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.
		
		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
						: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
						: and then encoded with base64 encoding.
		
		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
						: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
						: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
						: using a System.ComponentModel.TypeConverter
						: and then encoded with base64 encoding.
		-->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="UnknownLanguage" xml:space="preserve">
		<value>We couldn't recognize the language specified in the use language statement. You used language `{0}`. We only recognize the languages `{1}`.</value>
	</data>
	<data name="MissingNameForBlock" xml:space="preserve">
		<value>We couldn't find a name for your {0} block. Please name your new thunk.</value>
	</data>
	<data name="IllegalWhitespaceAtEnd" xml:space="preserve">
		<value>We were confused by whitespace `{0}` at the end of line. Each line must end with a newline and no other whitespace. Please double-check your whitespace.</value>
	</data>
	<data name="IllegalWhitespaceAtStart" xml:space="preserve">
		<value>We were confused by whitespace `{0}` at the start of line. Each line must start with the right number of indentations, each a single tab character, and no other whitespace. Please double-check your whitespace.</value>
	</data>
	<data name="IncorrectCommentSeparator" xml:space="preserve">
		<value>We found what we think was intended to be a comment, but it had the wrong separator. Comments must begin with `		#`. This possible comment started with `{0}`. Please fix it.</value>
	</data>
	<data name="IncorrectCommentFormat" xml:space="preserve">
		<value>We were confused by a comment. Comments must all be formatted like `#[4], [9], [2]`. This comment was `#{0}`. Please fix it.</value>
	</data>
	<data name="IllegalTabInLine" xml:space="preserve">
		<value>We were confused by a tab used for something other than indentation. Each line must start with the right number of indentations, each a single tab character. Tabs may also be used to separate the code line from a comment reference. Tabs are not allowed in any other place. Please clean up your tabs.</value>
	</data>
	<data name="MissingIdInCommentDefinition" xml:space="preserve">
		<value>We found a comment defintion but couldn't find its ID. Each comment must begin with an ID in the form `#[23]: `. Your comment starts with `{0}`.</value>
	</data>
	<data name="IncorrectCommentDefinitionSeparator" xml:space="preserve">
		<value>We found a nearly-valid comment definition, but it had the wrong whitespace between the ID and the content. Comment definitions must begin with `#[44]: `. Yours is like that, but instead of a single space after the colon you have `{0}`. Please fix it.</value>
	</data>
	<data name="IllegalWhitespaceOnBlankLine" xml:space="preserve">
		<value>We found bad whitespace on a blank line. Blank lines must either consist of just a newline, or must be indented the current indentation level and then have a newline. This blank line has the whitespace `{0}`. Please remove it.</value>
	</data>
	<data name="ErrorAtEndOfMultilineComment" xml:space="preserve">
		<value>We might have found the end of your multi-line comment, but we can't be sure. A multi-line comment must end with `"""` on its own line. We found something similar: `{0}`. Please end the comment properly.</value>
	</data>
	<data name="MultilineCommentWithoutEnd" xml:space="preserve">
		<value>We tried our best, but just couldn't find the end of this multi-line comment. Multi-line comments must end with a line containing just `"""`. Please end your comment.</value>
	</data>
</root>