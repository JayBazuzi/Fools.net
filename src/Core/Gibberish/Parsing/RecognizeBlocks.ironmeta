using System;
using System.Linq;
using Gibberish.AST;
using Gibberish.AST._1_Bare;

ironmeta RecognizeBlocks<char, Recognition> : IronMeta.Matcher.Matcher<char, Recognition>
{
	Statement = /[^\r\n\t:]/*:content NL:errs -> { return Recognition.With(new BareStatement(content.AsString(), ((Recognition) errs).UnattachedErrors)); };
/*	Block :indentation :prelude :allowed_statements = indentation prelude:prelude ":" NL:errs Body(indentation, allowed_statements):body -> { return Parse.Valid(new Block(prelude.Results.Single().WithErrorsFrom(errs), body.Results), Parse.NoErrors); };
	Body :indentation :allowed_statements = ((Indent(indentation) PassStatement) | ((Indent(indentation) allowed_statements)+)):statements -> { return statements; };
	*/

	BlankLine = '\t'* NL:errs -> { return errs; };

	AtRoot = &.?;
	Indent :indents = '\t' indents;

	Nothing = (~(.?));
	KW :str = str (WS+ | &NL);
	WS = ' ';
	NotNL = /[^\r\n]/;
	NL = ValidNL
		| /[ \t]+/:sp ValidNL -> { return ParseError.IllegalWhitespaceAtEnd(sp.AsString()).AsRecognition(); } ;
	ValidNL = ("\r\n" | "\n" | "\r") -> { return Recognition.Empty; };
}