using System;
using System.Linq;
using Gibberish.AST;

ironmeta ParseFasm<char, ParseTree> : ParseBlockLanguage
{
	Declarations = ((BlankLine* TopLevelStatement)*):statements -> { return new DeclarationSet(statements.Results); };

	TopLevelStatement = DefineThunk(AtRoot);

	DefineThunk :indentation = Block(indentation, DefineThunkPrelude, AllowedStatementsInDefineThunk):body -> {
		 var inner = (Block) body;
		 return new DefineThunkNode(((NameNode)inner.Prelude).Name, inner.Statements);
	 };
	DefineThunkPrelude = KW("define.named.thunk") Name:name -> { return name; };
	AllowedStatementsInDefineThunk = Nothing;

	PassStatement = Statement("pass") -> { return new PassStatement(); };

	Statement :rule = rule:r NL -> { return r; };
	Block :indentation :prelude :allowed_statements = indentation prelude:prelude ":" NL Body(indentation, allowed_statements):body -> { return new Block(prelude.Results.Single(), body.Results.Cast<Statement>()); };
	Body :indentation :allowed_statements = ((Indent(indentation) PassStatement) | ((Indent(indentation) allowed_statements)+)):statements -> { return statements; };

	BlankLine = '\t'* NL;

	AtRoot = &.?;
	Indent :indents = '\t' indents;

	Nothing = (~(.?));
}